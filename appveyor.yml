# see https://packaging.python.org/appveyor/
# see https://github.com/ogrisel/python-appveyor-demo/
# https://github.com/google/googletest/blob/master/appveyor.yml

# https://www.appveyor.com/updates/2016/03/08/
version: '{build}'
image: Visual Studio 2015
os: Visual Studio 2015
environment:
#  global:
#    # SDK v7.0 MSVC Express 2008's SetEnv.cmd script will fail if the
#    # /E:ON and /V:ON options are not enabled in the batch script intepreter
#    # See: http://stackoverflow.com/a/13751649/163740
#    CMD_IN_ENV: "cmd /E:ON /V:ON /C .\\appveyor\\run_with_env.cmd"
  matrix:

    # Pre-installed Python versions - see:
    # http://www.appveyor.com/docs/installed-software#python

    - PYTHON: "C:\\Python35"
      PYTHON_VERSION: "3.5.x"
      PYTHON_ARCH: "32"

    # appveyor tests run really slow; this one is generally timing out
    #- PYTHON: "C:\\Python35-x64"
    #  PYTHON_VERSION: "3.5.x"
    #  PYTHON_ARCH: "64"

    - PYTHON: "C:\\Python34"
      PYTHON_VERSION: "3.4.x"
      PYTHON_ARCH: "32"

    - PYTHON: "C:\\Python34-x64"
      PYTHON_VERSION: "3.4.x"
      PYTHON_ARCH: "64"

    #- PYTHON: "C:\\Python33"
    #  PYTHON_VERSION: "3.3.x"
    #  PYTHON_ARCH: "32"

    #- PYTHON: "C:\\Python33-x64"
    #  PYTHON_VERSION: "3.3.x"
    #  PYTHON_ARCH: "64"

#configuration:
#  - Release
#  - Debug

install:
  # If there is a newer build queued for the same PR, cancel this one.
  # The AppVeyor 'rollout builds' option is supposed to serve the same
  # purpose but it is problematic because it tends to cancel builds pushed
  # directly to master instead of just PR builds (or the converse).
  # credits: JuliaLang developers.
  - ps: if ($env:APPVEYOR_PULL_REQUEST_NUMBER -and $env:APPVEYOR_BUILD_NUMBER -ne ((Invoke-RestMethod `
        https://ci.appveyor.com/api/projects/$env:APPVEYOR_ACCOUNT_NAME/$env:APPVEYOR_PROJECT_SLUG/history?recordsNumber=50).builds | `
        Where-Object pullRequestId -eq $env:APPVEYOR_PULL_REQUEST_NUMBER)[0].buildNumber) { `
          throw "There are newer queued builds for this pull request, failing early." }
  - ECHO "Filesystem root:"
  - ps: "ls \"C:/\""

  # Check that we have the expected version and architecture for Python
  - "%PYTHON%\\python --version"
  - "%PYTHON%\\python -c \"import struct; print(struct.calcsize('P') * 8)\""

  # Upgrade to the latest version of pip to avoid it displaying warnings
  # about it being out of date.
  - "%PYTHON%\\Scripts\\pip install --disable-pip-version-check --user --upgrade pip"
  - "%PYTHON%\\Scripts\\pip install --disable-pip-version-check --user --upgrade setuptools"

  # Install the build dependencies of the project. If some dependencies contain
  # compiled extensions and are not provided as pre-built wheel packages,
  # pip will build them from source using the MSVC compiler matching the
  # target Python version and architecture
  - "%PYTHON%\\Scripts\\pip install -r requirements.txt"
  - "%PYTHON%\\Scripts\\pip install -r requirements_test.txt"

  - "%PYTHON%\\Scripts\\pip show -f codecov"

  #- ".ci\\show_cmake_sysinfo.bat"

build_script:
  # Build the compiled extension
  - "%PYTHON%\\python.exe setup.py build"

test_script:
  # Run the project tests
  - "echo starting_test"
  - ".ci\\appveyor_test.bat"
  - "echo end test"
  - "echo %cd%"

after_test:
  ## If tests are successful, create binary packages for the project.
  #- "echo %cd%"
  #- "%PYTHON%\\python setup.py bdist_wheel"
  #- "%PYTHON%\\python setup.py bdist_wininst"
  #- "%PYTHON%\\python setup.py bdist_msi"
  #- ps: "ls dist"

#artifacts:
#  # Archive the generated packages in the ci.appveyor.com build report.
#  - path: dist\*

on_success:
#  - TODO: upload the content of dist/*.whl to a public wheelhouse
  - codecov

skip_commits:
  files:
    - .gitignore
    - LICENSE.txt
    - README.md
    - .ci/travis*
    - .ci/dev_*
    - .ci/show_*
    - doc/*
